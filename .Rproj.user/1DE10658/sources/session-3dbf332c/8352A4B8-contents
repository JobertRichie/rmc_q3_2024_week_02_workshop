---
title: "Week 10: Exploring DHS data with {ggplot2}"
output:
  prettydoc::html_pretty:
    theme: architect
    toc: true
author: "Jobert Richie Nansseu"
date: "2024-06-11"
editor_options: 
  chunk_output_type: inline
---

```{r setup, echo = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

# Introduction

Welcome!

The workshop continues with a hands-on approach to data visualization and reviewing some functions you're already familiar with.

This week's lesson notes have been linked below. They can be very helpful for completing the exercise, so feel free to refer to them during the workshop!

-   [Boxplots with {ggplot2}](https://the-graph-courses.github.io/data_on_display_wp/lessons/ls05_boxplots.html)

-   [Visualizing Comparisons and Compositions](https://the-graph-courses.github.io/epi_reports/EPIREP_EN_parts_to_a_whole/EPIREP_EN_parts_to_a_whole.html)

# Set up for the exercise

1.  **First download the repo to your local computer.** To get started, you should download, unzip, and look through the assignment folder.

2.  **Open the** **RStudio Project** by clicking on the relevant *.Rproj* file in the unzipped workshop folder. Make sure you have opened week_10_workshop.Rproj in RStudio by looking at the name of your RStudio window, or in the upper right corner of your screen.

3.  **Open the assignment Rmd.** Navigate to the Files tab in RStudio and open the "rmd" folder. You will be working in the file called "week_10_exercise.Rmd". This Rmd contains both the instructions and the workshop assignment in one file.

4.  **Complete the assignment.** Work through the steps in "week_10_exercise.Rmd". Replace every instance of `"WRITE_YOUR_CODE_HERE"` with your answers. The assignment should be submitted individually, but you are encouraged to brainstorm with partners. Though you are allowed to work with group members, *it is important that all the code you submit has been typed yourself*.

# Load necessary packages

```{r}
pacman::p_load(
  janitor,    # for data analysis utilities
  here,       # to set the working directory
  haven,      # for reading Stata files
  tidyverse   # for data manipulation and visualization
  )
```

*NOTE: Please read through and run the code in the demo Rmd BEFORE starting this exercise.*

# Data Importation and Cleaning

## Step 1: Choose and import select columns

The code chunk below imports the same variables as presented in the demo. However, we want to augment this by adding five variables related to malaria-knowledge.

Scan through the data dictionary file and determine which five variables correspond to the following agreement statements:

-   Malaria can be fully cured by medicine
-   Malaria can lead to death
-   No worry about malaria due to easy treatment
-   Know people sick with malaria
-   Only weak children can die from malaria

Then, incorporate these variables into the data import code below.

**HINT:** These variables can be found on pages 225-226 of the data dictionary PDF.

**Note**: make sure ALL letters in the variable names are in **lower case**. For example, if the data dictionary says "S1108BA" you should change the 3 letters to lowercase like this: "s1108ba" when you enter it in `col_select`.

```{r}
# Import the .dta file and add the 5 malaria knowledge variables
ir_ng_18_raw <- 
  haven::read_dta(here("data/NGIR7BFL_mini.DTA"),
                  col_select = c(
                    # Basic information
                    v006, v007, v009, v010, v012, v013, 
                    v024, v025, v106, v130, v190,                     
                    # Literacy and media
                    v155, v156, v157, v158, v159, 
                    
                    # Fertility and reproductive timing
                    v201, v212, v213, v511, v531, 
                    
                    # Malaria knowledge variables
                    s1108ai, s1108ba, s1108bc, s1108bd, s1108bf
                    ))
```

## Step 2: Assign variable names

Assign descriptive names to the newly imported variables and then execute the code below.

```{r}
# Rename variables
ir_ng_18_renamed <- 
  ir_ng_18_raw %>% 
  rename(age = v012,
         age_group = v013,
         region = v024,
         urban_rural = v025,
         highest_educ = v106,
         religion = v130,
         literacy = v155,
         wealth_index = v190,
         num_kids = v201,
         age_first_birth = v212,
         age_first_cohabitation = v511,
         age_first_sex = v531, 
         
         # Rename malaria knowledge variables
         malaria_fully_cured = s1108ai, 
         malaria_lead_death = s1108ba, 
         no_worry_malaria_treatment = s1108bc, 
         people_sick_malaria = s1108bd, 
         weak_children_die_malaria = s1108bf
         )
```

## Step 3: Reveal coded values

With the suitable function from the `{haven}` package, transform all variables into regular R factors.

```{r}
# Add function to convert from labelled data to regular factors
ir_ng_18_clean <- 
  ir_ng_18_renamed %>% 
  as_factor()
```

**CHECKPOINT**: You should now have 3 data frames in your Environment: `ir_ng_18_raw`, `ir_ng_renamed`, and `ir_ng_18_clean`. Explore the `ir_ng_18_clean` dataset and ensure that the changes from Steps 1 through 3 have been successfully implemented. Value types should been converted to factors and the columns should have meaningful names. From here, the `ir_ng_18_clean` dataset is now ready to use and ready for plotting!

# Data visualization

## Set a global theme

Chose your favorite `{ggplot2}` theme and write code to automatically apply it to all your plots.

```{r}
# Change the default theme
theme_set(theme_gray())
```

## Histograms and boxplots for continuous distributions

a.  Choose one of the continuous variables from the dataset, such as `age` or `age_first_birth.` Then, generate a simple histogram of this variable. Make sure to provide the necessary title, labels, etc. to best communicate information to the audience.

```{r}
# Simple histogram
ggplot(data = ir_ng_18_clean,
       mapping = aes(x = age_first_birth)) +
  geom_histogram(color = "white",
                 binwidth = 2,
                 linewidth = 0.8,
                 fill = "forestgreen") +
  scale_x_continuous(breaks = seq(10, 40, 2)) +
  geom_text(stat = "bin",
            aes(y = ..count..,
                label = ..count..),
            binwidth = 2,
            color = "black",
            vjust = -0.5) +
  labs(x = "Age at first delivery",
       y = "Number of women",
       title = "Distribution of women according to their age at first delivery")
```
```{r}
#Simple histogram with age_first_sex
ir_ng_18_clean <- 
  ir_ng_18_clean %>% 
  mutate(age_first_sex_2 = as.numeric(as.character(age_first_sex))) 
 
ggplot(data = ir_ng_18_clean,
       mapping = aes(x = age_first_sex_2)) +
   geom_histogram(color = "white",
                  binwidth = 2,
                  linewidth = 0.8,
                  fill = "forestgreen") +
  scale_x_continuous(breaks = seq(10, 30, 2)) +
  geom_text(stat = "bin",
            aes(y = ..count..,
                label = ..count..),
            binwidth = 2,
            color = "black",
            vjust = -0.5) +
  labs(x = "Age at first sexual intercourse",
       y = "Number of women",
       title = "Distribution of women according to their age at first sexual intercourse")

summary(ir_ng_18_clean$age_first_sex_2)
```

b.  Now, create a boxplot to show the distribution of the continuous variable you chose earlier. The distribution should be grouped by one of the variables related to knowledge about malaria. Incorporate the `fill` aesthetic to color the boxes. Also adjust the colors, labels, titles, themes, etc. as you please.

```{r}
# Boxplot comparing groups
ggplot(data = ir_ng_18_clean,
       mapping = aes(x = malaria_fully_cured,
                     y = age_first_birth,
                     fill = malaria_fully_cured)) +
  geom_boxplot(linewidth = 0.7,
               color = "black",
               alpha = 0.8) +
  labs(fill = "Malaria can be fully cured",
       x = "Malaria can be fully cured",
       y = "Age at first delivery",
       title = "Variation in age at first delivery by level of education and knowledge on malaria treatment")
#This graph shows that the age at first delivery is comparable between women who think that malaria can be fully cured and those who disagree.

##Option 2: Comparing age at first delivery by level of education and knowledge on malaria treatment
ggplot(data = ir_ng_18_clean,
       mapping = aes(x = highest_educ,
                     y = age_first_birth,
                     fill = malaria_fully_cured)) +
  geom_boxplot(linewidth = 0.7,
               color = "black",
               alpha = 0.8) +
  labs(fill = "Malaria can be fully cured",
       x = "Level of education",
       y = "Age at first delivery",
       title = "Variation in age at first delivery by level of education and knowledge on malaria treatment")
#Age at first delivery seems to increase with level of education, i.e. women of higher level of education gave birth later than women of secondary or primary level. There might also be a difference in age at first delivery as per the knowledge on malaria treatment, but needs to be assessed through a statstical test.
```

## Barplots for discrete distributions

a.  Select one of the categorical variables from the dataset. Proceed to generate a simple bar plot to display the distribution of this variable.

```{r}
# Simple barplot with the level of education
ggplot(data = ir_ng_18_clean,
       mapping = aes(x = highest_educ)) + 
  geom_bar(fill = "steelblue") + 
  geom_text(stat = "count",
            aes(label = after_stat(count)),
            color = "black",
            vjust = -0.5,
            size = 5) +
  labs(x = "Level of education",
       y = "Number of women",
       title = "Distribution of respondents by level of education")
```

b.  Next, adapt your plot above to create a PERCENT-STACKED bar plot. To do this, add the `fill` aesthetic and set it to a malaria knowledge variable of your choosing; for example: `aes(fill = MALARIA_VAR)`. Remember to add the appropriate `position` argument. The final graph should compare how answers to the malaria knowledge survey question varies between groups.

```{r}
# Percent-stacked barplot using geom_bar
ggplot(data = ir_ng_18_clean,
       mapping = aes(x = highest_educ,
                     fill = malaria_lead_death)) + 
  geom_bar(position = "fill") + 
  geom_text(stat = "count",
            aes(label = after_stat(count)),
            color = "black",
            vjust = -0.5,
            size = 5,
            position = position_fill(vjust = 0.5)) +
  labs(x = "Level of education",
       y = "Number of women",
       title = "Distribution of respondents by level of education",
       fill = "Malaria can lead to death")

#Percent stacked barplot using geom_col
sum_plot <- 
  ir_ng_18_clean %>% 
  count(highest_educ, malaria_lead_death) %>% 
  group_by(highest_educ) %>% 
  mutate(pct = round(100*n/sum(n))) %>% 
  ungroup()

sum_plot %>% 
  ggplot(mapping = aes(x = highest_educ,
                       y = n,
                       fill = malaria_lead_death)) +
  geom_col(position = "fill") + 
  geom_text(aes(label = pct),
            position = position_fill(vjust = 0.5),
            color = "white",
            size = 5,
            fontface = 2) +
  scale_x_discrete(labels = c("No education", "Primary", "Secondary", "University/College")) +
  labs(x = "Level of education",
       y = "Number of women",
       title = "Distribution of respondents by level of education and knowledge on malaria burden",
       fill = "Malaria can lead to death")

# Alternative code for sum_plot
# sum_plot <- 
#   ir_ng_18_clean %>% 
#   group_by(highest_educ, malaria_lead_death) %>% 
#   summarise(n = n()) %>% 
#   group_by(highest_educ) %>% 
#   mutate(pct = round(100*n/sum(n))) %>% 
#   ungroup()
```

c.  Finally, create a GROUPED bar chart with any two categorical variables of your choice. Adjust the colors, labels, titles, themes, etc. as you please.

```{r}
#Creating a grouped barplot with geom_col
ir_ng_18_clean %>% 
  group_by(highest_educ, malaria_lead_death) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  ggplot(mapping = aes(x = highest_educ,
                       y = n,
                       fill = malaria_lead_death)) + 
  geom_col(position = "dodge") + 
  geom_text(aes(label = n,
                group = malaria_lead_death),
            color = "black",
            position = position_dodge(width = 0.9),
            vjust = -0.5,
            size = 4,
            fontface = 2) +
  scale_x_discrete(labels = c("No education", "Primary", "Secondary", "University/College")) +
  labs(x = "Level of education",
       y = "Number of women",
       title = "Distribution of respondents by level of education and knowledge on malaria burden",
       fill = "Malaria can lead to death")

#Using geom_bar
 ggplot(data = ir_ng_18_clean,
        mapping = aes(x = highest_educ,
                      fill = malaria_lead_death)) + 
  geom_bar(position = "dodge") + 
  geom_text(aes(label = after_stat(count),
                group = malaria_lead_death),
            stat = "count",
            color = "black",
            position = position_dodge(width = 0.9),
            vjust = -0.5,
            size = 4,
            fontface = 2) +
  scale_x_discrete(labels = c("No education", "Primary", "Secondary", "University/College")) +
  labs(x = "Level of education",
       y = "Number of women",
       title = "Distribution of respondents by level of education and knowledge on malaria burden",
       fill = "Malaria can lead to death")
```

# Submission: Upload Rmd file

Once you have finished the tasks above, you should save your answers and upload your assignment Rmd on the workshop webpage. You should upload just one Rmd file with your answers (do not upload the knitted HTML or a zipped folder). Make sure to include your name in the YAML header at the top of the script.

The due date for the assignment is **Friday, June 14th at 23:59 PM GMT.**

# Bonus challenge: Donut charts

Represent the data from your grouped bar chart as a series of donut charts.

HINT: The `facet_wrap()` function from `{ggplot2}` will come in handy.

```{r}
# Bonus challenge!
  sum_plot %>% 
  ggplot(mapping = aes(x = 2,
                       y = n,
                       fill = malaria_lead_death)) + 
  geom_col(position = "fill",
           color = "white",
           linewidth = 0.8) + 
  geom_text(aes(label = pct),
            position = position_fill(vjust = 0.5),
            color = "white",
            fontface = 2,
            show.legend = F,
            size = 5) +
  coord_polar(theta = "y") +
  xlim(c(0.2, 2 + 0.5)) +
  facet_wrap(~highest_educ) +
  labs(title = "Distribution of respondents by level of education 
       and knowledge on malaria burden",
       fill = "Level of education") +
  theme_void() + 
  theme(legend.position = "bottom",
        plot.title = element_text(size = 15))
```
